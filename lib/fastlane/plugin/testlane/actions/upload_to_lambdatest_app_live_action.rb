require 'fastlane/action'
require_relative '../helper/testlane_helper'
require 'json'

module Fastlane
  module Actions
    module SharedValues
      APP_URL ||= :APP_URL
    end
    class UploadToLambdatestAppLiveAction < Action
      SUPPORTED_FILE_EXTENSIONS = ["apk", "ipa", "aab"]
      UPLOAD_API_ENDPOINT = "https://manual-api.lambdatest.com/app/upload/realDevice"

      def self.run(params)
        lt_username = params[:lt_username] # Required
        lt_access_key = params[:lt_access_key] # Required
        file_path = params[:file_path].to_s # Required

        validate_file_path(file_path)

        UI.message("Uploading app to Lambdatest App...")

        lt_app_url = Helper::TestLaneHelper.upload_file(lt_username, lt_access_key, file_path, UPLOAD_API_ENDPOINT)

        # Set 'APP_URL' environment variable, if app upload was successful.
        ENV['APP_URL'] = lt_app_url
       
        UI.success(ENV['APP_URL'])

        UI.success("Successfully uploaded app " + file_path + " to Lambdatest AppLive with app_url : " + lt_app_url)

        UI.success("Setting Environment variable APP_URL = " + lt_app_url)

        # Setting app id in SharedValues, which can be used by other fastlane actions.
        Actions.lane_context[SharedValues::APP_URL] = lt_app_url
      end

      # Validate file_path.
      def self.validate_file_path(file_path)
        UI.user_error!("No file found at '#{file_path}'.") unless File.exist?(file_path)

        # Validate file extension.
        file_path_parts = file_path.split(".")
        unless file_path_parts.length > 1 && SUPPORTED_FILE_EXTENSIONS.include?(file_path_parts.last)
          UI.user_error!("file_path is invalid, only files with extensions " + SUPPORTED_FILE_EXTENSIONS.to_s + " are allowed to be uploaded.")
        end
      end

      def self.description
        "Uploads IPA and APK files to Lambdatest for test."
      end

      def self.authors
        ["Pawan Rai"]
      end

      def self.details
        "Uploads IPA and APK files to Lambdatest for test."
      end

      def self.output
        [
          ['APP_URL', 'App URL of uploaded app.']
        ]
      end

      def self.default_file_path
        platform = Actions.lane_context[Actions::SharedValues::PLATFORM_NAME]
        if platform == :ios
          # Shared value for ipa path if it was generated by gym https://docs.fastlane.tools/actions/gym/.
          return Actions.lane_context[Actions::SharedValues::IPA_OUTPUT_PATH]
        else
          # Shared value for apk if it was generated by gradle.
          return Actions.lane_context[Actions::SharedValues::GRADLE_APK_OUTPUT_PATH]
        end
      end

      def self.available_options
        [
          FastlaneCore::ConfigItem.new(key: :lt_username,
                                       description: "Lambdatest's username",
                                       optional: false,
                                       is_string: true,
                                       verify_block: proc do |value|
                                         UI.user_error!("No LT username given.") if value.to_s.empty?
                                       end),
          FastlaneCore::ConfigItem.new(key: :lt_access_key,
                                       description: "Lambdatest's access token",
                                       optional: false,
                                       is_string: true,
                                       verify_block: proc do |value|
                                         UI.user_error!("No lt_access_key given.") if value.to_s.empty?
                                       end),
          FastlaneCore::ConfigItem.new(key: :file_path,
                                       description: "Path to the app file",
                                       optional: true,
                                       is_string: true,
                                       default_value: default_file_path)
        ]
      end

      def self.is_supported?(platform)
        [:ios, :android].include?(platform)
      end

      def self.example_code
        [
          'upload_to_lambdatest_app_live',
          'upload_to_lambdatest_app_live(
            lt_username: ENV["LT_USERNAME"],
            lt_access_key: ENV["LT_ACCESS_KEY"],
            file_path: "path_to_apk_or_ipa_file"
           )'
        ]
      end
    end
  end
end
